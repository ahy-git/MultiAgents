from dotenv import load_dotenv
from crewai import Agent, Task, Crew, Process
from MyLLM import MyLLM

class SummaryCrew:
    """
    Classe para organizar um agente, tarefa e execu√ß√£o de resumos de mensagens do WhatsApp.
    """

    def __init__(self):
        load_dotenv()
        # self.llm = "gemini/gemini-2.0-flash-lite"
        # self.llm = LLM(model="ollama/deepseek-r1:14b", base_url="http://localhost:11434", max_tokens=2048, num_ctx=12000)
        # self.llm = LLM(model="ollama/deepseek-r1:8b", base_url="http://localhost:11434",
        #                max_tokens=131072, num_ctx=12000, timeout=1200)
        # self.llm = LLM(model="gemini/gemini-2.0-flash-lite")
        self.llm = MyLLM.geminiflash20
        self.create_crew()

    def create_crew(self):
        # Configurar o agente
        self.agent = Agent(
            role="Assistente de Resumos",
            goal="Criar resumos organizados e objetivos de mensagens de WhatsApp.",
            backstory=(
                "Voc√™ √© um assistente de IA especializado em analisar e organizar informa√ß√µes "
                "extra√≠das de mensagens de WhatsApp, garantindo clareza e objetividade."
            ),
            verbose=True,
            memory=False,  # N√£o precisa de mem√≥ria para esta tarefa simples
            llm=self.llm
        )

        # Configurar a tarefa
        self.task = Task(
            description=r"""
Voc√™ √© um assistente de IA especializado 
em criar resumos organizados e objetivos 
de mensagens em grupos de WhatsApp. 
Seu objetivo √© apresentar as informa√ß√µes 
de forma clara e segmentada, 
usando o templete delimitado por <template>. 
Para alimentar o resumo use as mensagens
de WhatsApp delimitadas por <msgs>. 

Importante:
- Ignore mensagens que s√£o resumos anteriores.
- Retire os placeholders < > do texto. 
- Deve haver somente um t√≥pico da lista abaixo no resumo:
    - Resumo do Grupo
    - T√≥pico Principal
    - D√∫vidas, Erros e suas Solu√ß√µes
    - Resumo geral do per√≠odo
    - Links do Dia
    - Conclus√£o
- Quando n√£o houver informa√ß√µes sobre um t√≥pico simplesmente n√£o coloque o t√≥pico.
<template>
*Resumo do Grupoüìù - <Data ou Per√≠odo>*

*<T√≥pico Principal> <Emoji relacionado> - <Hor√°rio>*

- *Participantes:* <Nomes dos usu√°rios envolvidos>  
- *Resumo:* <Descri√ß√£o do t√≥pico discutido, incluindo detalhes importantes e a√ß√µes relevantes>  

*D√∫vidas, Erros e suas Solu√ß√µes ‚ùì - <Hor√°rio>*

- *Solicitado por:* <Nome do participante que levantou a d√∫vida ou relatou o erro>  
- *Respondido por:* <Nome(s) dos participantes que ofereceram solu√ß√µes ou respostas>
- *Resumo:* <Descri√ß√£o do problema ou d√∫vida e as solu√ß√µes ou respostas apresentadas.> 

*Resumo geral do per√≠odo üìä:*
- <Resumo curto e objetivo sobre o tom geral das intera√ß√µes ou assuntos discutidos no per√≠odo.>

*Links do Diaüîó:*
- <Caso sejam compartilhados links importantes, liste-os aqui com data e contexto.>

*Conclus√£o üîö:*
- <Conclua destacando o ambiente do grupo ou a produtividade das intera√ß√µes.>
</template>

Mensagens do grupo para an√°lise:

<msgs>
{msgs}
</msgs>



            """,
            expected_output=(
                "Um resumo segmentado de acordo com o template fornecido, contendo apenas informa√ß√µes "
                "relevantes extra√≠das das mensagens fornecidas."
            ),
            agent=self.agent,
        )

        # Configurar o crew
        self.crew = Crew(
            agents=[self.agent],
            tasks=[self.task],
            process=Process.sequential,  # Processa as tarefas em sequ√™ncia
        )

    def kickoff(self, inputs):
        """
        Executa o processo de resumo de mensagens.

        Args:
            msgs (str): Mensagens de WhatsApp para processar.

        Returns:
            str: O resumo gerado no formato esperado.
        """
        result = self.crew.kickoff(inputs=inputs).raw
        return result
