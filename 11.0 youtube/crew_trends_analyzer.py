from crewai import Agent,Task,Crew,Process
from tool_trends import TrendTool
from MyLLM import MyLLM

class YoutubeTrendAnalyzer:
    
    def __init__(self):
        self.llm=MyLLM.gpt4o_mini
        self.crew = self._setup_crew()
        
    def _setup_crew(self):
        # ğŸ”¹ Agente 1: Analista de TendÃªncias
        analista_tendencias = Agent(
            role=r"""Analista de TendÃªncias do YouTube""",
            goal=r"""Analisar os vÃ­deos mais populares do YouTube e gerar insights sobre as tendÃªncias.""",
            backstory=r"""
                VocÃª Ã© um especialista em anÃ¡lise de dados e tendÃªncias digitais. Seu foco Ã© ajudar criadores de conteÃºdo a 
                entenderem o que estÃ¡ viralizando no YouTube e como podem aproveitar essas tendÃªncias.
            """,
            tools=[TrendTool()],  # Usando a ferramenta personalizada
            verbose=True,
            llm=self.llm
        )

        # ğŸ”¹ Agente 2: Especialista em Engajamento
        especialista_engajamento = Agent(
            role=r"""Especialista em Engajamento Digital""",
            goal=r"""Interpretar os padrÃµes de engajamento e prever futuras tendÃªncias do YouTube.""",
            backstory=r"""
                VocÃª Ã© um analista de redes sociais que entende profundamente o comportamento dos usuÃ¡rios no YouTube.
                Seu objetivo Ã© interpretar mÃ©tricas como curtidas, comentÃ¡rios e crescimento de visualizaÃ§Ãµes para prever 
                quais tipos de vÃ­deos e conteÃºdos continuarÃ£o em alta.
            """,
            tools=[],  # Esse agente nÃ£o usa ferramentas, sÃ³ interpreta os dados coletados
            verbose=True,
            llm=self.llm
        )

        # ğŸ”¹ Task 1: Buscar vÃ­deos populares
        analise_tendencias_task = Task(
            description=r"""
                Pesquise os {max_results} vÃ­deos mais populares 
                no YouTube na categoria {category}, 
                dentro da regiÃ£o {region}.
                
                Analise os {num_comments} primeiros comentÃ¡rios 
                de cada vÃ­deo para entender o engajamento do pÃºblico. 
                Identifique os temas mais recorrentes, 
                os padrÃµes de engajamento e os canais influentes.
                
                Destaque vÃ­deos com alta taxa de crescimento e 
                faÃ§a previsÃµes sobre o que pode continuar em alta.
            """,
            expected_output=r"""
                Um relatÃ³rio textual sobre as tendÃªncias 
                atuais do YouTube na categoria {category}, 
                na regiÃ£o {region}. O relatÃ³rio deve 
                destacar os principais vÃ­deos virais, 
                anÃ¡lises de engajamento e previsÃµes sobre 
                futuras tendÃªncias.
            """,
            agent=analista_tendencias,
            verbose=True
        )

        # ğŸ”¹ Task 2: Analisar padrÃµes de engajamento
        analise_engajamento_task = Task(
            description=r"""
                Com base nos dados coletados sobre tendÃªncias do YouTube, analise os padrÃµes de engajamento. 
                Considere a quantidade de curtidas, comentÃ¡rios e a velocidade de crescimento dos vÃ­deos.
                
                Identifique quais formatos de vÃ­deos estÃ£o gerando mais interaÃ§Ã£o e destaque quais criadores estÃ£o crescendo 
                rapidamente na plataforma.
                
                No final, forneÃ§a uma previsÃ£o sobre quais tipos de vÃ­deos provavelmente continuarÃ£o em alta.
            """,
            expected_output=r"""
                Um relatÃ³rio detalhado sobre o engajamento dos vÃ­deos, incluindo previsÃµes sobre tendÃªncias futuras e quais 
                formatos de vÃ­deos estÃ£o em ascensÃ£o.
            """,
            agent=especialista_engajamento
        )

        # ğŸ”¹ Criando a Crew que executarÃ¡ a anÃ¡lise
        return Crew(
            agents=[analista_tendencias, especialista_engajamento],
            tasks=[analise_tendencias_task, analise_engajamento_task],
            process=Process.sequential  # O agente executa a tarefa de forma sequencial
        )      
    
    def kickoff(self,inputs):
        
        ret = self.crew.kickoff(inputs=inputs)
        return ret


# ## TEST    
# crew = YoutubeTrendAnalyzer()
# inputs = {
#     "category": "28",  # CiÃªncia e Tecnologia
#     "region": "US",  # Estados Unidos
#     "max_results": 10,  # Buscar 10 vÃ­deos
#     "num_comments": 5  # Analisar 5 comentÃ¡rios por vÃ­deo
# } 

# retorno = crew.kickoff(inputs=inputs)
# print(retorno)