from crewai import Agent,Task,Crew,Process
from tool_youtube_videos import YouTubeVideoTool
from MyLLM import MyLLM

class YouTubeVideoAnalyzer:
    
    def __init__(self):
        self.llm = MyLLM.geminiflash15
        self.crew = self._setup_crew()
    
    def _setup_crew(self):
        agent_analista_videos = Agent(
            role=r"""Analista de V√≠deos do YouTube""",
            goal=r"""Analisar uma lista de v√≠deos do YouTube e gerar insights detalhados sobre engajamento e tend√™ncias.""",
            backstory=r"""
                Voc√™ √© um especialista em an√°lise de v√≠deos do YouTube. Seu objetivo √© revisar m√©tricas como 
                visualiza√ß√µes, curtidas e coment√°rios para entender padr√µes de engajamento e prever tend√™ncias futuras.
            """,
            tools=[YouTubeVideoTool()],  # Agora usamos a nova ferramenta
            verbose=True                 
        )
        
        task_analise_videos = Task(
            description=r"""
                Analise a seguinte lista de v√≠deos do YouTube:
                
                {video_ids}
                
                Para cada v√≠deo, colete as seguintes informa√ß√µes:
                - T√≠tulo do v√≠deo
                - Canal
                - N√∫mero de visualiza√ß√µes
                - Curtidas
                - Coment√°rios
                - Dura√ß√£o do v√≠deo
                - Se tem legendas dispon√≠veis
                
                A partir desses dados, gere um relat√≥rio sobre padr√µes de engajamento e poss√≠veis tend√™ncias emergentes.
            """,
            expected_output=r"""
                Um relat√≥rio detalhado analisando os v√≠deos fornecidos, destacando padr√µes de engajamento, 
                crescimento e previs√µes sobre tend√™ncias futuras.
            """,
            agent=agent_analista_videos            
            
        )
        
        return Crew(
            agents=[agent_analista_videos],
            tasks=[task_analise_videos],
            process=Process.sequential  # O agente executa a tarefa de forma sequencial            
        )

    def kickoff(self,video_links):
        
        video_ids = [link.split('v=')[-1] for link in video_links]
        inputs = {"video_ids": "\n".join(video_ids)}
        print(f"[TOOL] Coletando dados dos v√≠deos: {video_ids}")
        ret = self.crew.kickoff(inputs= inputs)
        return ret.raw

## TEST
# video_analyzer = YouTubeVideoAnalyzer()
# videos = [
#     "https://www.youtube.com/watch?v=-fPZsngNMFs",
#     "https://www.youtube.com/watch?v=m2rG6zHoxBo",
#     "https://www.youtube.com/watch?v=m46tZX6vceI"
# ]

# resultado = video_analyzer.kickoff(video_links=videos)

# # üîπ Exibir o relat√≥rio
# print("üìä An√°lise dos v√≠deos fornecidos:\n", resultado)       
        
        
        