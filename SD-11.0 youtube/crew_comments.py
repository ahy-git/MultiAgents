from crewai import Agent, Task, Crew, Process
from tool_comments import CommentsTool
from MyLLM import MyLLM

class YouTubeCommentsAnalyzer:
    
    def __init__(self):
        self.llm = MyLLM.gpt4o_mini
        self.crew = self._setupcrew()

    
    def _setupcrew(self):
        """
        Configura os agentes que realizar√£o a extra√ß√£o e an√°lise dos coment√°rios.
        """

        # üîπ Agente Extrator de Coment√°rios
        extrator_comentarios = Agent(
            role="Especialista em Extra√ß√£o de Coment√°rios",
            goal="Coletar e filtrar coment√°rios relevantes de v√≠deos do YouTube.",
            backstory="Voc√™ √© um expert em an√°lise de feedback de usu√°rios e sabe identificar coment√°rios relevantes.",
            tools=[CommentsTool()],  # Usando a ferramenta CommentsTool
            verbose=True,
            llm = self.llm
        )

        # üîπ Agente Analista de Necessidades
        analista_necessidades = Agent(
            role="Analista de Necessidades do Usu√°rio",
            goal="Identificar padr√µes e necessidades dos usu√°rios a partir dos coment√°rios dos v√≠deos.",
            backstory="Voc√™ √© um especialista em entender os desejos e dificuldades dos usu√°rios, transformando feedback em insights valiosos.",
            verbose=True,
            llm = self.llm
        )

        # üîπ Tarefa: Extrair Coment√°rios
        extracao_task = Task(
            description="""
                Extraia todos os coment√°rios dos seguintes v√≠deos do YouTube:
                
                {video_ids}
                
                Filtre os coment√°rios removendo mensagens gen√©ricas de parab√©ns e elogios.
                Retorne uma lista de coment√°rios relevantes para an√°lise.
            """,
            expected_output="Uma lista de coment√°rios √∫teis e relevantes para an√°lise.",
            agent=extrator_comentarios
        )

        # üîπ Tarefa: Analisar Necessidades
        analise_task = Task(
            description="""
                Analise os coment√°rios extra√≠dos dos v√≠deos abaixo:
                
                {video_ids}
                
                Identifique padr√µes e principais necessidades dos usu√°rios.
                Classifique as necessidades em categorias como: sugest√µes de melhoria, d√∫vidas frequentes, problemas relatados.
            """,
            expected_output="Um relat√≥rio com insights sobre as principais necessidades dos usu√°rios.",
            agent=analista_necessidades
        )

        # üîπ Criando a Crew
        return Crew(
            agents=[extrator_comentarios, analista_necessidades],
            tasks=[extracao_task, analise_task],
            process=Process.sequential  # O primeiro agente extrai, o segundo analisa
        )

    def kickoff(self, video_links):
        """
        Executa a Crew para analisar coment√°rios dos v√≠deos do YouTube.

        :param video_links: Lista de URLs dos v√≠deos do YouTube.
        :return: Relat√≥rio textual da an√°lise.
        """

        video_ids = [link.split("v=")[-1] for link in video_links]

        inputs = {"video_ids": "\n".join(video_ids)}

        resultado = self.crew.kickoff(inputs=inputs)
        return resultado.raw
    
# TEST
# video_analyzer = YouTubeCommentsAnalyzer()
# videos = [
#     "https://www.youtube.com/watch?v=-fPZsngNMFs",
#     "https://www.youtube.com/watch?v=m2rG6zHoxBo",
#     "https://www.youtube.com/watch?v=m46tZX6vceI"
# ]

# resultado = video_analyzer.kickoff(video_links=videos)

# # üîπ Exibir o relat√≥rio
# print("üìä An√°lise dos Coment√°rios:\n", resultado)

        